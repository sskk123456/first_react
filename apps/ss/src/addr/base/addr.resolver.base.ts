/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAddrArgs } from "./CreateAddrArgs";
import { UpdateAddrArgs } from "./UpdateAddrArgs";
import { DeleteAddrArgs } from "./DeleteAddrArgs";
import { AddrCountArgs } from "./AddrCountArgs";
import { AddrFindManyArgs } from "./AddrFindManyArgs";
import { AddrFindUniqueArgs } from "./AddrFindUniqueArgs";
import { Addr } from "./Addr";
import { AddrService } from "../addr.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Addr)
export class AddrResolverBase {
  constructor(
    protected readonly service: AddrService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Addr",
    action: "read",
    possession: "any",
  })
  async _addrsMeta(
    @graphql.Args() args: AddrCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Addr])
  @nestAccessControl.UseRoles({
    resource: "Addr",
    action: "read",
    possession: "any",
  })
  async addrs(@graphql.Args() args: AddrFindManyArgs): Promise<Addr[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Addr, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Addr",
    action: "read",
    possession: "own",
  })
  async addr(@graphql.Args() args: AddrFindUniqueArgs): Promise<Addr | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Addr)
  @nestAccessControl.UseRoles({
    resource: "Addr",
    action: "create",
    possession: "any",
  })
  async createAddr(@graphql.Args() args: CreateAddrArgs): Promise<Addr> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        addr: args.data.addr
          ? {
              connect: args.data.addr,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Addr)
  @nestAccessControl.UseRoles({
    resource: "Addr",
    action: "update",
    possession: "any",
  })
  async updateAddr(@graphql.Args() args: UpdateAddrArgs): Promise<Addr | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          addr: args.data.addr
            ? {
                connect: args.data.addr,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Addr)
  @nestAccessControl.UseRoles({
    resource: "Addr",
    action: "delete",
    possession: "any",
  })
  async deleteAddr(@graphql.Args() args: DeleteAddrArgs): Promise<Addr | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Addr], { name: "addrs" })
  @nestAccessControl.UseRoles({
    resource: "Addr",
    action: "read",
    possession: "any",
  })
  async resolveFieldAddrs(
    @graphql.Parent() parent: Addr,
    @graphql.Args() args: AddrFindManyArgs
  ): Promise<Addr[]> {
    const results = await this.service.findAddrs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Addr, {
    nullable: true,
    name: "addr",
  })
  @nestAccessControl.UseRoles({
    resource: "Addr",
    action: "read",
    possession: "any",
  })
  async resolveFieldAddr(@graphql.Parent() parent: Addr): Promise<Addr | null> {
    const result = await this.service.getAddr(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
